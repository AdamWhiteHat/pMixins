//----------------------------------------------------------------------- 
// <copyright file="MixinHasMultipleConstructors.cs" company="Copacetic Software"> 
// Copyright (c) Copacetic Software.  
// <author>Philip Pittle</author> 
// <date>Wednesday, January 29, 2014 10:57:24 PM</date> 
// Licensed under the Apache License, Version 2.0,
// you may not use this file except in compliance with this License.
//  
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an 'AS IS' BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright> 
//-----------------------------------------------------------------------

using CopaceticSoftware.pMixins.Tests.Common.Extensions;
using NBehave.Spec.NUnit;
using NUnit.Framework;

namespace CopaceticSoftware.pMixins.CodeGenerator.Tests.IntegrationTests.CompileTests.AdvancedMixinTypes
{
    [TestFixture]
    public class MixinHasMultipleConstructors : GenerateCodeAndCompileTestBase
    {
        protected override string SourceCode
        {
            get
            {
                return
                    @"
                
                using pMixins.AutoGenerated.Test.TargetWithInitialization.Test.MixinWithMultipleConstructors;

                namespace Test
                {
                    public class MixinWithMultipleConstructors
                    {
                        private string constructorTag;

                        public MixinWithMultipleConstructors()
                        {
                            constructorTag = ""No Parameters"";
                        }

                        public MixinWithMultipleConstructors(int i)
                        {
                            constructorTag = ""1 Parameter"";
                        }       

                        public string ConstructorTag(){return constructorTag;}                         
                    }

                    [CopaceticSoftware.pMixins.Attributes.pMixin(
                        Mixin = typeof (MixinWithMultipleConstructors))]
                    public partial class TargetWithoutInitialization{}        

                    [CopaceticSoftware.pMixins.Attributes.pMixin(
                        Mixin = typeof (MixinWithMultipleConstructors),
                        ExplicitlyInitializeMixin = true)]
                    public partial class TargetWithInitialization
                    {
                        MixinWithMultipleConstructors
                        CopaceticSoftware.pMixins.Infrastructure.IMixinConstructorRequirement<MixinWithMultipleConstructors>.InitializeMixin()
                        {
                            return new MixinWithMultipleConstructors(1);
                        }
                    }                          
                }";
            }

        }

        [Test]
        public void TargetWithoutInitializationCanUseDefaultMixinConstructor()
        {
            CompilerResults
                .ExecuteMethod<string>(
                    "Test.TargetWithoutInitialization",
                    "ConstructorTag")
                .ShouldEqual("No Parameters"); 
        }

        [Test]
        public void TargetWithCanUseInitializationToCreateMixin()
        {
            CompilerResults
                .ExecuteMethod<string>(
                    "Test.TargetWithInitialization",
                    "ConstructorTag")
                .ShouldEqual("1 Parameter");
        }
    }
}

//----------------------------------------------------------------------- 
// <copyright file="MixinIsSealedType.cs" company="Copacetic Software"> 
// Copyright (c) Copacetic Software.  
// <author>Philip Pittle</author> 
// <date>Wednesday, January 29, 2014 10:57:24 PM</date> 
// Licensed under the Apache License, Version 2.0,
// you may not use this file except in compliance with this License.
//  
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an 'AS IS' BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright> 
//-----------------------------------------------------------------------

using System.Linq;
using CopaceticSoftware.pMixins.CodeGenerator.Tests.Extensions;
using NBehave.Spec.NUnit;
using NUnit.Framework;

namespace CopaceticSoftware.pMixins.CodeGenerator.Tests.IntegrationTests.CompileTests.AdvancedMixinTypes
{
    public class MixinIsSealedType : GenerateCodeAndCompileTestBase
    {
        protected override string SourceCode
        {
            get
            {
                return
                    @"
                using pMixin.AutoGenerated.Test.TargetWithInitialization.Test.SealedMixin;

                namespace Test
                {
                    public sealed class SealedMixin
                    {
                        private string constructorTag;

                        public SealedMixin()
                        {
                            constructorTag = ""No Parameters"";
                        }

                        public SealedMixin(int i)
                        {
                            constructorTag = ""1 Parameter"";
                        }       

                        protected string ProtectedMethod()
                        {
                            return ""Protected method on Sealed is same as Private"";
                        }       

                        public string ConstructorTag(){return constructorTag;}                         
                    }

                    [CopaceticSoftware.pMixins.Attributes.pMixin(
                        Mixin = typeof (SealedMixin))]
                    public partial class TargetWithoutInitialization{}        

                    [CopaceticSoftware.pMixins.Attributes.pMixin(
                        Mixin = typeof (SealedMixin),
                        ExplicitlyInitializeMixin = true)]
                    public partial class TargetWithInitialization
                    {
                        SealedMixin 
                        CopaceticSoftware.pMixins.Infrastructure.IMixinConstructorRequirement<SealedMixin>.InitializeMixin()
                        {
                            return new SealedMixin(1);
                        }
                    }                        
                }";
            }
        }

        [Test]
        public void CanCallMethod()
        {
            CompilerResults
                .ExecuteMethod<string>(
                    "Test.TargetWithoutInitialization",
                    "ConstructorTag")
                .ShouldEqual("No Parameters");
        }

        [Test]
        public void TargetCanUseExplicitInitialization()
        {
            CompilerResults
                .ExecuteMethod<string>(
                    "Test.TargetWithInitialization",
                    "ConstructorTag")
                .ShouldEqual("1 Parameter");
        }

        [Test]
        public void ProtectedMethodIsNotAccessible()
        {
            var instance =
                CompilerResults
                    .TryLoadCompiledType("Test.TargetWithoutInitialization");

            Assert.True(null != instance, "Failed to load Test.TargetWithoutInitialization");

            instance.GetType().GetMethods(ReflectionHelper.DefaultBindingFlags)
                .Any(method => method.Name == "ProtectedMethod").ShouldBeFalse();

        }
    }
}

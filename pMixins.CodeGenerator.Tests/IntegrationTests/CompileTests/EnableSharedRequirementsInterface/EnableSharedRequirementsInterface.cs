//----------------------------------------------------------------------- 
// <copyright file="EnableSharedRequirementsInterface.cs" company="Copacetic Software"> 
// Copyright (c) Copacetic Software.  
// <author>Philip Pittle</author> 
// <date>Monday, July 21, 2014 4:58:58 PM</date> 
// Licensed under the Apache License, Version 2.0,
// you may not use this file except in compliance with this License.
//  
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an 'AS IS' BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright> 
//-----------------------------------------------------------------------

using CopaceticSoftware.pMixins.Tests.Common.Extensions;
using NUnit.Framework;

namespace CopaceticSoftware.pMixins.CodeGenerator.Tests.IntegrationTests.CompileTests.EnableSharedRequirementsInterface
{
    [TestFixture]
    public class EnableSharedRequirementsInterface : GenerateCodeAndCompileTestBase
    {
        protected override string SourceCode
        {
            get
            {
                return
                    @"
                    using CopaceticSoftware.pMixins.Attributes;

                    namespace Test
                    {
                        public abstract class MixinBase
                        {
                            protected abstract string Name {get;}
                        }

                        public abstract class Mixin1 : MixinBase
                        {
                            public string GetName1(){
                                return ""Mixin1 "" + Name;
                            }
                        }

                        public abstract class Mixin2 : MixinBase
                        {
                            public string GetName2(){
                                return ""Mixin2 "" + Name;
                            }
                        }
                        
                        [pMixin(Mixin = typeof(Mixin1))]
                        [pMixin(Mixin = typeof(Mixin2))]
                        public partial class Target
                        {
                            string pMixins.AutoGenerated.Test.Target.__Shared.ISharedRequirements.NameImplementation
                            {
                                get{return ""Target With Shared Requirements""; } 
                            }

                        }

                        [pMixin(Mixin = typeof(Mixin1), EnableSharedRequirementsInterface = false)]
                        [pMixin(Mixin = typeof(Mixin2))]
                        public partial class TargetNoSharedRequirements
                        {
                            string pMixins.AutoGenerated.Test.TargetNoSharedRequirements.Test.Mixin1.IMixin1Requirements.NameImplementation
                            {
                                get{return ""TargetNoSharedRequirements""; } 
                            }

                            string pMixins.AutoGenerated.Test.TargetNoSharedRequirements.Test.Mixin2.IMixin2Requirements.NameImplementation
                            {
                                get{return ""TargetNoSharedRequirements""; } 
                            }
                        }
                    }
                ";
            }
        }

        [Test]
        public void CanCallTargetMethod()
        {
            dynamic target = CompilerResults.TryLoadCompiledType("Test.Target");

            Assert.AreEqual(
                "Mixin1 Target With Shared Requirements",
                ((string)target.GetName1()));

            Assert.AreEqual(
                "Mixin2 Target With Shared Requirements",
                ((string)target.GetName2()));
        }

        [Test]
        public void CanCallTargetNoSharedRequirementsMethod()
        {
            dynamic target = CompilerResults.TryLoadCompiledType("Test.TargetNoSharedRequirements");

            Assert.AreEqual(
                "Mixin1 TargetNoSharedRequirements",
                ((string)target.GetName1()));

            Assert.AreEqual(
                "Mixin2 TargetNoSharedRequirements",
                ((string)target.GetName2()));
        }
    }
}

//----------------------------------------------------------------------- 
// <copyright file="CreateMasterWrapperPlan.cs" company="Copacetic Software"> 
// Copyright (c) Copacetic Software.  
// <author>Philip Pittle</author> 
// <date>Thursday, July 24, 2014 6:03:42 PM</date> 
// Licensed under the Apache License, Version 2.0,
// you may not use this file except in compliance with this License.
//  
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an 'AS IS' BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright> 
//-----------------------------------------------------------------------

using System.Linq;
using CopaceticSoftware.CodeGenerator.StarterKit.Extensions;
using CopaceticSoftware.Common.Extensions;
using CopaceticSoftware.Common.Patterns;
using CopaceticSoftware.pMixins.CodeGenerator.Infrastructure.CodeGenerationPlan;

namespace CopaceticSoftware.pMixins.CodeGenerator.Pipelines.CreateCodeGenerationPlan.Steps
{
    /// <summary>
    /// Creates a <see cref="MasterWrapperPlan"/> for every
    /// <see cref="MixinGenerationPlan"/>.
    /// </summary>
    public class CreateMasterWrapperPlan : IPipelineStep<ICreateCodeGenerationPlanPipelineState>
    {
        public bool PerformTask(ICreateCodeGenerationPlanPipelineState manager)
        {
            foreach (var mixinPlan in
                manager.CodeGenerationPlans.SelectMany(
                    x => x.Value.MixinGenerationPlans))
            {
                mixinPlan.Value.MasterWrapperPlan = BuildPlan(mixinPlan.Value);
            }

            return true;
        }

        private MasterWrapperPlan BuildPlan(MixinGenerationPlan mixinPlan)
        {
            var mixinInstanceTypeFullName = ResolveMixinInstanceTypeFullName(mixinPlan);

            return new MasterWrapperPlan
            {
                MasterWrapperClassName = 
                    mixinPlan.MixinAttribute.Mixin.GetNameAsIdentifier() + 
                    "MasterWrapper",

                MasterWrapperInstanceNameInMixinsContainer =
                    mixinPlan.MixinAttribute.Mixin.GetFullNameAsIdentifier(),

                MixinInstanceTypeFullName = 
                    mixinInstanceTypeFullName,

                MixinInstanceInitializationStatement =
                    CreateMixinInitializationStatement(mixinPlan, mixinInstanceTypeFullName),

                ProtectedAbstractMembers =
                    mixinPlan.Members
                        .Where(m =>
                            (m.Member.IsAbstract || m.Member.IsOverride)
                            && m.Member.IsProtected),

                RegularMembers =
                    mixinPlan.Members
                        .Where(m =>
                            !m.Member.IsStaticOrConst() &&
                            !(m.Member.IsAbstract && m.Member.IsProtected) &&
                            !m.Member.IsOverride &&
                            !m.Member.IsOverridable &&
                            !m.Member.IsVirtual),

                StaticMembers =
                    mixinPlan.Members
                        .Where(m => m.Member.IsStaticOrConst()),

                VirtualMembers =
                    mixinPlan.Members
                        .Where(m =>
                            m.Member.IsVirtual ||
                            (
                                m.Member.IsOverride ||
                                m.Member.IsOverridable &&
                                ! m.Member.IsProtected
                                ))
            };
        }

        private string ResolveMixinInstanceTypeFullName(
            MixinGenerationPlan mixinPlan)
        {
            if (!mixinPlan.AbstractWrapperPlan.Members.Any() &&
                !mixinPlan.ProtectedWrapperPlan.Members.Any())
            {
                //Can just use mixin type
                return
                    mixinPlan.MixinAttribute.Mixin.GetOriginalFullNameWithGlobal();
            }

            else if (mixinPlan.AbstractWrapperPlan.GenerateAbstractWrapperInExternalNamespace)
            {
                //External_Namespace.AbstractWrapper
                return
                    mixinPlan.ExternalMixinSpecificAutoGeneratedNamespaceName.EnsureEndsWith(".") +
                    mixinPlan.AbstractWrapperPlan.AbstractWrapperClassName;
            }
            else
            {
                //Abstract warpper is in the same namespace
                return mixinPlan.AbstractWrapperPlan.AbstractWrapperClassName;
            }
        }


        private string CreateMixinInitializationStatement(
            MixinGenerationPlan mixinPlan,
            string mixinInstanceTypeFullName)
        {
            if (mixinPlan.MixinAttribute.ExplicitlyInitializeMixin)
            {
                //initialize by casting the 'target' constructor parameter
                //to IMixinConstructorRequirement and calling InitializeMixin

                return
                    string.Format(
                        @"( 
                                (global::CopaceticSoftware.pMixins.Infrastructure.
                                    IMixinConstructorRequirement<{0}>)
                                {1}
                            )
                            .InitializeMixin();",
                            mixinInstanceTypeFullName,
                            MasterWrapperPlan.TargetInstanceConstructorParameterName);
            }

            else if (mixinPlan.MixinAttribute.Mixin.GetDefinition().IsSealed)
            {
                return
                    string.Format("base.TryActivateMixin<{0}>();",
                      mixinPlan.MixinAttribute.Mixin.GetOriginalFullNameWithGlobal());
            }
            else if (mixinPlan.MixinAttribute.Mixin.GetDefinition().IsAbstract)
            {
                return
                    string.Format("base.TryActivateMixin<{0}>({1});",
                        mixinInstanceTypeFullName,
                        MasterWrapperPlan.TargetInstanceConstructorParameterName);
            }
            else
            {
                //Don't understand this fallback case. See which tests
                //fail and react accordingly (and add additional documentation)
                return
                    string.Format("base.TryActivateMixin<{0}>({1});",
                        mixinInstanceTypeFullName,
                        MasterWrapperPlan.TargetInstanceConstructorParameterName); ;
            }
        }
    }
}

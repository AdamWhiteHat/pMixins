//----------------------------------------------------------------------- 
// <copyright file="SetMixinGenerationPlanDetails.cs" company="Copacetic Software"> 
// Copyright (c) Copacetic Software.  
// <author>Philip Pittle</author> 
// <date>Friday, July 25, 2014 4:32:50 PM</date> 
// Licensed under the Apache License, Version 2.0,
// you may not use this file except in compliance with this License.
//  
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an 'AS IS' BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright> 
//-----------------------------------------------------------------------

using System.Linq;
using CopaceticSoftware.CodeGenerator.StarterKit.Extensions;
using CopaceticSoftware.Common.Patterns;
using CopaceticSoftware.pMixins.CodeGenerator.Infrastructure.CodeGenerationPlan;
using ICSharpCode.NRefactory.CSharp;

namespace CopaceticSoftware.pMixins.CodeGenerator.Pipelines.CreateCodeGenerationPlan.Steps
{
    public class SetMixinGenerationPlanDetails : IPipelineStep<ICreateCodeGenerationPlanPipelineState>
    {
        private const string AutogeneratedNamespacePrefix = "pMixins.AutoGenerated";

        public bool PerformTask(ICreateCodeGenerationPlanPipelineState manager)
        {
            var allMixinPlans =
                manager.CodeGenerationPlans
                    .SelectMany(cp =>
                        cp.Value.MixinGenerationPlans.Select(mp => mp.Value));

            foreach (var mixinPlan in allMixinPlans)
            {
                mixinPlan.ExternalMixinSpecificAutoGeneratedNamespaceName =
                    string.Format("{0}.{1}.{2}.{3}",
                        AutogeneratedNamespacePrefix,
                        (mixinPlan.SourceClass.GetParent<NamespaceDeclaration>()
                         ?? new NamespaceDeclaration("Unknown")).FullName,
                        mixinPlan.SourceClass.Name,
                        mixinPlan.MixinAttribute.Mixin.FullName);

                mixinPlan.RequirementsInterfacePlan = new RequirementsInterfacePlan
                {
                    Members = null,

                    RequirementsInterfaceName = 
                        mixinPlan.MixinAttribute.Mixin.GetNameAsIdentifier() + "Requirements"
                    
                }
            }

            return true;
        }
    }
}

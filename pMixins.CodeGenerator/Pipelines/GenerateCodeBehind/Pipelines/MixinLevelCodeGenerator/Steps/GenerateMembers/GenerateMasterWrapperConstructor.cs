using System.Collections.Generic;
using System.Linq;
using System.Text;
using CopaceticSoftware.CodeGenerator.StarterKit.Extensions;
using CopaceticSoftware.Common.Extensions;
using CopaceticSoftware.Common.Patterns;
using CopaceticSoftware.pMixins.CodeGenerator.Infrastructure;
using CopaceticSoftware.pMixins.CodeGenerator.Infrastructure.CodeGenerationPlan;
using CopaceticSoftware.pMixins.CodeGenerator.Infrastructure.CodeGeneratorProxy;
using CopaceticSoftware.pMixins.Interceptors;
using ICSharpCode.NRefactory.TypeSystem;

namespace CopaceticSoftware.pMixins.CodeGenerator.Pipelines.GenerateCodeBehind.Pipelines.MixinLevelCodeGenerator.Steps.GenerateMembers
{
    /// <summary>
    /// Adds the constructor
    /// to the <see cref="MixinLevelCodeGeneratorPipelineState.MasterWrapper"/>.
    /// <code>
    /// <![CDATA[
    /// public class MixinMasterWrapper  
    /// { 
    ///		public MixinMasterWrapper (IMixinRequirements target)
    ///		{
    ///			_mixinInstance = base.TryActivateMixin<__pMixinAutoGenerated.Test_Mixin.MixinAbstractWrapper> (target);
    /// 
    ///			base.Initialize (
    ///             target,
    ///             _mixinInstance, 
    ///             new List<IMixinInterceptor> {}
    ///         );
    ///		}
    /// }
    /// ]]></code>
    /// </summary>
    public class GenerateMasterWrapperConstructor : IPipelineStep<MixinLevelCodeGeneratorPipelineState>
    {
        public bool PerformTask(MixinLevelCodeGeneratorPipelineState manager)
        {
            var codeGenerator = new CodeGeneratorProxy(manager.MasterWrapper);

            

            GenerateConstructor(codeGenerator, manager);

            return true;
        }

        private void GenerateConstructor(CodeGeneratorProxy codeGenerator, MixinLevelCodeGeneratorPipelineState manager)
        {
            var constructorBodyStatements = new StringBuilder();

            #region Mixin Instance Initialization Statement

            constructorBodyStatements.AppendFormat(
                "{0} = {1}",
                MasterWrapperPlan.MixinInstanceDataMemberName,
                manager.MixinGenerationPlan.MasterWrapperPlan.MixinInstanceInitializationStatement
                    .EnsureEndsWith(";"));

            #endregion

            #region Initialize Virtual Member Functions

            var masterWrapperMemberHelper = 
                new MasterWrapperCodeGeneratorProxyMemberHelper(
                    codeGenerator,
                    manager.CommonState.Context.TypeResolver.Compilation);

            manager.MixinGenerationPlan.MasterWrapperPlan.VirtualMembers.
                Map(mw => constructorBodyStatements.Append(
                    GenerateVirtualMemberFunctionInitializationStatement(mw, masterWrapperMemberHelper)));

            #endregion

            #region Initialize BaseMasterWrapper Statement

            constructorBodyStatements.AppendFormat(
                "base.Initialize( {0}, {1}, new global::System.Collections.Generic.List<global::{2}>{{ {3} }});",
                MasterWrapperPlan.TargetInstanceConstructorParameterName,
                MasterWrapperPlan.MixinInstanceDataMemberName,
                typeof(IMixinInterceptor).GetOriginalFullName(),
                string.Join(",",
                    manager.MixinGenerationPlan.MixinAttribute.Interceptors
                        .Select<IType, string>(x => x.GenerateActivationExpression())
                    )
                );

            #endregion

            codeGenerator.CreateConstructor(
                modifiers:
                    "public",
                parameters:
                    new[]
                    {
                        new KeyValuePair<string, string>(
                            manager.MixinGenerationPlan.ExternalMixinSpecificAutoGeneratedNamespaceName.EnsureEndsWith(
                                ".") +
                            manager.MixinGenerationPlan.RequirementsInterfacePlan.RequirementsInterfaceName,
                            MasterWrapperPlan.TargetInstanceConstructorParameterName)
                    },
                constructorInitializer:
                    string.Empty,
                constructorBody:
                    constructorBodyStatements.ToString());
        }

        private string GenerateVirtualMemberFunctionInitializationStatement(
            MemberWrapper mw, 
            MasterWrapperCodeGeneratorProxyMemberHelper masterWrapperMemberHelper)
        {
            #region mw.Member is IMethod

            if (mw.Member is IMethod)
            {
                //ProtectedVirtualMethodFunc = (i) => AbstractWrapper.ProtectedVirtualMethod(i);
                return string.Format("{0} = ({1}) => {2};",

                    mw.ImplementationDetails.VirtualMemberFunctionName,

                    string.Join(",",
                        (mw.Member as IMethod).Parameters.Select(x => x.Name)),

                    masterWrapperMemberHelper.GetMethodBodyCallStatement(
                        method:
                            mw.Member as IMethod,
                        baseObjectIdentifier:
                            MasterWrapperPlan.MixinInstanceDataMemberName,
                        methodName:
                            mw.Member.Name));
            }

            #endregion

            #region mw.Member is IProperty

            if (mw.Member is IProperty)
            {
                return string.Format(
                    "{0}" +     //Get
                    "{1}",      //Set

                    
                    (!(mw.Member as IProperty).CanGet)
                        ? string.Empty
                        : 
                        #region Get
                        string.Format(
                            "{0}Get = () => {1};",
                            mw.ImplementationDetails.VirtualMemberFunctionName,

                            masterWrapperMemberHelper.GetPropertyGetterReturnBodyStatement(
                                prop:
                                    mw.Member as IProperty,
                                baseObjectIdentifier:
                                    MasterWrapperPlan.MixinInstanceDataMemberName,
                                propertyName:
                                    mw.ImplementationDetails.ProtectedAbstractMemberPromotedToPublicMemberName
                                )
                            ),
                    #endregion
                
                    (!(mw.Member as IProperty).CanSet)
                        ? string.Empty
                        : 
                        #region Set
                        string.Format(
                            "{0}Set = (value) => {1};",
                            mw.ImplementationDetails.VirtualMemberFunctionName,

                            masterWrapperMemberHelper.GetPropertySetterReturnBodyStatement(
                                prop:
                                    mw.Member as IProperty,
                                baseObjectIdentifier:
                                    MasterWrapperPlan.MixinInstanceDataMemberName,
                                propertyName:
                                    mw.ImplementationDetails.ProtectedAbstractMemberPromotedToPublicMemberName
                                )
                            )
                    #endregion
                    );
            }

            #endregion

            return string.Empty;
        }
    }
}
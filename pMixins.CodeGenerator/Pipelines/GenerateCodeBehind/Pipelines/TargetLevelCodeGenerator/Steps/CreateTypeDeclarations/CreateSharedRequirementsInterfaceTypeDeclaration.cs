//----------------------------------------------------------------------- 
// <copyright file="CreateSharedRequirementsInterfaceTypeDeclaration.cs" company="Copacetic Software"> 
// Copyright (c) Copacetic Software.  
// <author>Philip Pittle</author> 
// <date>Friday, July 25, 2014 6:10:58 PM</date> 
// Licensed under the Apache License, Version 2.0,
// you may not use this file except in compliance with this License.
//  
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an 'AS IS' BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright> 
//-----------------------------------------------------------------------

using CopaceticSoftware.CodeGenerator.StarterKit.Extensions;
using CopaceticSoftware.Common.Patterns;
using CopaceticSoftware.pMixins.CodeGenerator.Infrastructure;
using CopaceticSoftware.pMixins.CodeGenerator.Pipelines.GenerateCodeBehind.Pipelines.TargetLevelCodeGenerator.Steps.GenerateMembers;
using ICSharpCode.NRefactory.CSharp;

namespace CopaceticSoftware.pMixins.CodeGenerator.Pipelines.GenerateCodeBehind.Pipelines.TargetLevelCodeGenerator.Steps.CreateTypeDeclarations
{
    /// <summary>
    /// Creates the interface definition for the Shared Requirements Interfaces
    /// and assings it to <see cref="TargetLevelCodeGeneratorPipelineState.SharedRequirementsInterface"/>.
    /// <code>
    /// <![CDATA[
    /// public interface ISharedRequirementsInterface{}
    /// ]]>
    /// </code>
    /// </summary>
    /// <remarks>
    /// Members are added later in <see cref="GenerateSharedRequirementsInterfaceMembers"/>
    /// </remarks>
    /// <remarks>
    /// This is intended to contain abstract methods that are common to more than one Mixin in a Target.
    /// </remarks>
    public class CreateSharedRequirementsInterfaceTypeDeclaration : IPipelineStep<TargetLevelCodeGeneratorPipelineState>
    {
        public bool PerformTask(TargetLevelCodeGeneratorPipelineState manager)
        {
            var sharedRequirementsInterface = new TypeDeclaration
            {
                ClassType = ClassType.Interface,
                Modifiers = Modifiers.Public,
                Name = manager.CodeGenerationPlan.SharedRequirementsInterfacePlan.RequirementsInterfaceName
            };
            
            //Have CodeGeneratorProxy add the Code Generated attribute
            new CodeGeneratorProxy(sharedRequirementsInterface, true);

            //Add to Code Behind Syntax Tree
            manager.CodeBehindSyntaxTree
                .AddChildTypeDeclaration(
                    sharedRequirementsInterface,
                    manager.ExternalTargetSpecificAutoGeneratedNamespace);
            
            manager.SharedRequirementsInterface = sharedRequirementsInterface;

            return true;
        }
    }
}

@using CopaceticSoftware.pMixins.Mvc.Extensions

@{
    ViewBag.Title = "How It Works";
}

<div class="container body-content">
    <div class="row">
        <div class="col-md-12">
            <blockquote class="pull-right">
                <p>In the real world, inheritance tends to be an antipattern</p>
                <small>
                    Kas Thomas <cite title="Big Think">
                        <a href="http://asserttrue.blogspot.nl/2009/02/inheritance-as-antipattern.html">Big Think</a>
                    </cite>
                </small>
            </blockquote>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <h1>How <span class="logo-code">[<span class="typ">p</span>Mixins]</span> Works</h1>
            <p>
                <span class="logo-code">[<span class="typ">p</span>Mixins]</span> is a Visual Studio plug-in that
                scans a solution for <code>partial</code> classes decorated with <code>pMixin</code> attributes.
                By marking your class <code>partial</code>, <span class="logo-code">[<span class="typ">p</span>Mixins]</span>
                can create a <em>code-behind</em> file and add additional members to your class.
                This is the same mechanism <a href="http://www.asp.net">asp.net</a> uses to create data members for server-side controls.
                In fact, this is how <span class="logo-code">[<span class="typ">p</span>Mixins]</span>
                gets its name: <em>partial mixins</em>!
            </p>
            <h3>Design-Time Weaving</h3>
            <p>
                The process of combining the code from several classes together in AOP is called <a href="http://en.wikipedia.org/wiki/Aspect_weaver">aspect weaving.</a>.
                The most commonly occurs at either compile-time by invoking a custom compiler
                (this is the method <a href="http://www.postsharp.net/">PostSharp</a> uses) or at run-time by emitting
                specialized <em>proxy</em> objects
                (this is how <a href="http://www.castleproject.org/projects/dynamicproxy/">Castle Dynamic Proxy</a> works).
            </p>
            <p>
                Since <span class="logo-code">[<span class="typ">p</span>Mixins]</span> uses code-behind files which are generated
                as soon as the save button is clicked in Visual Studio, I have come to call this Design-Time Weaving. There are several benifits
                with this approach because with Design Tiem Weaving, the aspect weaving code is generated immediatly.  This means
                that Visaul Studio will give you Intellisense support.  Code analysis tools like <a href="http://www.jetbrains.com/resharper/">ReSharper</a>
                fully understand the code.  And the Compiler gives you full compile-time error checking - every line of code that could be executes
                exists <em>before</em> compilation.
            </p>
            <p>
                Design Time Weaving also, works great for teams.   If your colleagues don't want to use
                <span class="logo-code">[<span class="typ">p</span>Mixins]</span>,
                that's not a problem.  Because the code-behind files are already generated and checked into your version control system of choice
                so they don't need <span class="logo-code">[<span class="typ">p</span>Mixins]</span> installed to build or run the solution.
                And this is the same for your build server, test server, etc.
            </p>
            <p>
                Is there a down side?  Like any engineering decission there are always trade offs.  <span class="logo-code">[<span class="typ">p</span>Mixins]</span>
                does have a small NuGet <a href="https://www.nuget.org/packages/pMixins/">dependency</a>, but there is an additional Visual Studio
                plugin that will auto-add it to your projects:
                <a href="http://visualstudiogallery.msdn.microsoft.com/e2fb83fc-a6e2-46bd-a392-00f9d081b17c">pMixins - Item Template</a>.  And since
                <span class="logo-code">[<span class="typ">p</span>Mixins]</span> doesn't change the original class, the syntax can be more limited
                when compared to other frameworks, but in practice, this is rarely an issue.
            </p>
            <h3>Code Behind Walk Through</h3>
            <p>
                So let's take a look at the code-behind file generated by <span class="logo-code">[<span class="typ">p</span>Mixins]</span>.
                Down below is a simplified version of
                the code behind generated for the <em>Introduction</em> class from the
                @Html.ActionLink("Introduction", "Index", "Introduction") page.  This is a lot to digest
                in one piece, but we'll walk through it step by step futher below.
            </p>

            @Html.RenderSourceClass("Introduction/ExampleCodeBehind.cs", "Introduction")

           
        </div>
    </div>

</div>

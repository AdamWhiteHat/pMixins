@using CopaceticSoftware.pMixins.Mvc.Extensions

@{
    ViewBag.Title = "Introduction";
}

@*
    http://www.javaworld.com/article/2073649/core-java/why-extends-is-evil.html
    http://simpleprogrammer.com/2010/01/15/inheritance-is-inherently-evil/
    http://msmvps.com/blogs/jon_skeet/archive/2007/02/27/wacky-ideas-1-inheritance-is-dead-long-live-mix-ins.aspx
    http://asserttrue.blogspot.nl/2009/02/inheritance-as-antipattern.html
    http://craigpardey.com/wp/2012/07/anti-pattern-re-use-through-inheritance/
    http://berniesumption.com/software/inheritance-is-evil-and-must-be-destroyed/
*@

<div class="container body-content">
    <div class="row">
        <div class="col-md-12">
            <blockquote class="pull-right">
                <p>Wacky Ideas 1: Inheritance is dead, long live mix-ins!</p>
                <small>
                    Jon Skeet <cite title="MS MVP - Coding Blog">
                        <a href="http://msmvps.com/blogs/jon_skeet/archive/2007/02/27/wacky-ideas-1-inheritance-is-dead-long-live-mix-ins.aspx">MS MVP - Coding Blog</a>
                    </cite>
                </small>
            </blockquote>
        </div>
    </div>
    <div class="row">
        <div class="col-md-10">
            <h1>Welcome to <span class="logo-code">[<span class="typ">p</span>Mixins]</span></h1>
            <p>
                <span class="logo-code">[<span class="typ">p</span>Mixins]</span> is a simple and straight forward framework for easy mixin and AOP in C#.
                In essence, it is a
                <a href="http://visualstudiogallery.msdn.microsoft.com/a40fde9e-0e3f-4cdc-9c2a-af9de11695b2">Visual Studio Plugin</a>
                that generates <em>code-behind</em> files; auto-generating the boilerplate and weaving code to compose the mixins into the target.  This is the
                same mechanism asp.net uses to convert markup into .net code.
            </p>
            <p>
                So let's see a hello world example.  I have a class, aptly named <em>HelloWorld</em>.
                It has a method, <em>SayHello</em>:
            </p>
            @Html.RenderSourceClass("Introduction/Introduction.cs", "HelloWorld")
            <p>
                I want the <em>SayHello</em> method to be availabe from my class <em>Introduction</em>.  I mark my class <code>partial</code>,
                so that <span class="logo-code">[<span class="typ">p</span>Mixins]</span> can work with it, and then decorate the class
                with the <code>pMixin</code> attribute.
            </p>
            @Html.RenderSourceClass("Introduction/Introduction.cs", "Introduction")
            <p>
                And that's it.  <em>Introduction</em> now has a method called <em>SayHello</em>!
            </p>
            @Html.RenderSourceClass("Introduction/Introduction.cs", "Program")

            <pre class="console">
     Saying Hello
     Hello World!
</pre>
        </div>
    </div>
    <div class="row">
        <div class="col-md-10">
            <h3>Aspect Oriented Programming</h3>
            <p>
                Continuing from the example above, <span class="logo-code">[<span class="typ">p</span>Mixins]</span>
                can intercept calls to mixed in members.  By implementing <code>IMixinInterceptor</code>
                (or extending the convienance class <em>MixinInterceptorBase</em>) you can create <em>Aspects</em>:
            </p>
            @Html.RenderSourceClass("Introduction/AspectIntroduction.cs", "Aspect")
            <p>
                The <em>Aspect</em> class will write the name of a method before and after the method is called
                and prepends the string <em> - Now with Aspects!</em> to the end of the return value.
            </p>
            <p>
                Wiring in the <em>Aspect</em> class is again done using the <code>pMixin</code> attribute:
            </p>
            @Html.RenderSourceClass("Introduction/AspectIntroduction.cs", "AspectIntroduction")
            <p>And with no changes to the Program:</p>
            @Html.RenderSourceClass("Introduction/AspectIntroduction.cs", "Program")
            <p>
                This is the result:
            </p>
            <pre class="console">
     Before SayHello
     Saying Hello
     After SayHello
     Hello World! - Now with Aspects! 
</pre>
        </div>
    </div>
</div>

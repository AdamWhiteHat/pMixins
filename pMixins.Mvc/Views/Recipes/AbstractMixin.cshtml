@using CopaceticSoftware.pMixins.Mvc.Extensions

<div class="row">
    <div class="col-md-12">
        <h2>Abstract Mixins</h2>
        <p>
            Want to Mixin in an <code>abstract</code> class?  No problem!
            <span class="logo-code ">[<span class="typ">p</span>Mixins]</span> can do that.
            It automatically generates a <em>Requirements</em> interface that forces the
            <em>Target</em> to implement any abstract members.
        </p>
        <p>
            So given the following Mixin definition with the abstract Property <em>Name</em> and a
            method <em>PrintName</em> which uses <em>Name</em>:
        </p>
        @Html.RenderSourceClass("AbstractMixin/AbstractMixin.cs", "PrinterMixin")
        <p>
            Let's see the target <em>AbstractMixinExmaple:</em>
        </p>
        @Html.RenderSourceClass("AbstractMixin/AbstractMixin.cs", "AbstractMixinExample")
        <p>
            <span class="logo-code ">[<span class="typ">p</span>Mixins]</span> has autogenerated
            an interface <code>IPrinterMixinRequirements</code> and the Target is responsible
            for satisfying it.
        </p>
        <p>
            <strong>Best Practice:</strong> <em>Requriements</em> intefaces should be implemented
            explicitly so that it is not exposed to consumers of <em>Target</em>.  There is a current
            <a href="https://github.com/ppittle/pMixins/issues/14">Issue</a> exploring if this syntax
            can be simplified.
        </p>
        <p>
            And let's see the <em>AbstractMixinExample</em> in action:
        </p>
        @Html.RenderSourceClass("AbstractMixin/AbstractMixin.cs", "AbstractMixinTest")
        <p>
            In the <em>CanCallAbstractProperty</em> Test we can see that the target <em>AbstractMixinExample</em>
            has the abstract Property <em>Name</em> Mixed in and it operates as expected.
        </p>
        <p>
            In the <em>CanPrintName</em> Test we can see that the normal method <em>PrintName</em> is 
            Mixed in operates as expected; working with the abstract <em>Name</em> Property.
        </p>
    </div>
</div>


@{
    ViewBag.Title = "Recipes";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container body-content">
    <div class="row">
        <div class="col-md-12">
            <blockquote class="pull-right">
                <p>
                    AOP will allow you to spend more time adding value and less time doing mindless, tedious work.  It will get you to happy hour faster;
                </p>
                <small>
                    Mathew D. Groves <cite title="AOP in .NET">
                        <a href="http://www.manning.com/groves/">AOP in .NET</a>
                    </cite>
                </small>
            </blockquote>
        </div>
    </div>
    <div class="row">
        <div class="col-md-10">
            <h1><span class="logo-code">[<span class="typ">p</span>Mixins]</span> Recipes</h1>
            <p>
                These examples cover common use case scenarios and highlight what can be done with <span class="logo-code">[<span class="typ">p</span>Mixins]</span>.
            </p>
            <p>
                Full source code can for all recipes can be downloaded <a href="~/Content/pMixins.Mvc.Recipes.zip">here</a>!
            </p>
            <p>&nbsp;</p>
            <div class="list-group">
                <a href="@Url.Action("BasicMixin")" class="list-group-item">
                    <h4 class="list-group-item-heading">Basic Mixin</h4>
                    <p>A simple introduction to using <span class="logo-code">[<span class="typ">p</span>Mixins]</span>.  Hello World!</p>
                </a>
                <a href="@Url.Action("AbstractMixin")" class="list-group-item">
                    <h4 class="list-group-item-heading">Abstract Mixin</h4>
                    <p>Want to Mixin a class that is <em>abstract</em>?  No problem!</p>
                </a>
                <a href="@Url.Action("VirtualMethodOverrides")" class="list-group-item">
                    <h4 class="list-group-item-heading">Overriding Virtual Mixin Methods</h4>
                    <p>How to override <em>virtual</em> Mixin methods in both the Target and Target's children.</p>
                </a>
                <a href="@Url.Action("DependencyInjectionMixin")" class="list-group-item">
                    <h4 class="list-group-item-heading">Depenendcy Injection</h4>
                    <p>How to wire up <em>Dependency Injection</em> into the <span class="logo-code">[<span class="typ">p</span>Mixins]</span> infrastructure.</p>
                </a>
                <a href="@Url.Action("SpecificMixinConstructor")" class="list-group-item">
                    <h4 class="list-group-item-heading">Specific Mixin Constructor</h4>
                    <p>Have a Mixin with multiple constructors?  Pick the one you want!</p>
                </a>
                <a href="@Url.Action("NonPublicNonParameterlessConstructor")" class="list-group-item">
                    <h4 class="list-group-item-heading">Non Public / Non Paramaterless Constructor</h4>
                    <p>How to work with Mixins that have a <em>protected non parameterless</em> constructor.</p>
                </a>
                <a href="@Url.Action("CastingAndConversionOperators")" class="list-group-item">
                    <h4 class="list-group-item-heading">Casting and Conversion (<em>is</em> / <em>as</em>) Operators</h4>
                    <p>Examples for converting to mixed in types.</p>
                </a>
                <a href="@Url.Action("Repository")" class="list-group-item">
                    <h4 class="list-group-item-heading">The Repository Pattern</h4>
                    <p>
                        An in-depth look at using <span class="logo-code">[<span class="typ">p</span>Mixins]</span>
                        and the Repository pattern.
                    </p>
                </a>
                <a href="@Url.Action("MixinMasks")" class="list-group-item">
                    <h4 class="list-group-item-heading">Mixin Masks</h4>
                    <p>Filter which members are mixed in and only import what you want.</p>
                </a>
            </div>
            <ul>
                <li>AOP - Logging / Exception Handling / Parameter Checking</li>
                <li>Decorators via <em>IMixinDependency</em></li>
                <li>AOP - <em>InterceptorMixinRequirement</em></li>
            </ul>
            <p>
                Download the source for all recipes <a href="~/Content/pMixins.Mvc.Recipes.zip">Here!</a>
            </p>

        </div>
    </div>
</div>

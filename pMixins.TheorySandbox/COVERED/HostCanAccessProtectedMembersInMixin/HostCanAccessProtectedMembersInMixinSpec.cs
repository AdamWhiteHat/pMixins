//----------------------------------------------------------------------- 
// <copyright file="HostCanAccessProtectedMembersInMixinSpec.cs" company="Copacetic Software"> 
// Copyright (c) Copacetic Software.  
// <author>Philip Pittle</author> 
// <date>Wednesday, September 4, 2013 10:27:47 AM</date> 
// Licensed under the Apache License, Version 2.0,
// you may not use this file except in compliance with this License.
//  
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an 'AS IS' BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright> 
//-----------------------------------------------------------------------

using System;
using CopaceticSoftware.pMixins.CodeGenerator.Tests.IntegrationTests.CompileTests.AdvancedMixinTypes;
using CopaceticSoftware.pMixins.CodeGenerator.Tests.IntegrationTests.CompileTests.ProtectedMembersTests;

namespace CopaceticSoftware.pMixins.TheorySandbox.COVERED.HostCanAccessProtectedMembersInMixin
{
    
    ////////////////////
    /// These classes are also used by <see cref="InheritingFromHostPreservesMemberAccess"/>
    //////////////////// 
    

    /// <summary>
    /// Covered in:
    ///     <see cref="TargetCanAccessProtectedMembers"/>
    ///     <see cref="MixinHasMultipleConstructors"/>
    ///     <see cref="MixinDoesNotHavePublicConstructor"/>
    /// </summary>
    public class HostCanAccessProtectedMembersInMixinMixin
    {
        protected string prettyName;

        public HostCanAccessProtectedMembersInMixinMixin() : this("public constructor"){}
        
        protected HostCanAccessProtectedMembersInMixinMixin(string name)
        {
            prettyName = "Pretty " + name;
        }
    }

    [BasicMixin(Target=typeof(HostCanAccessProtectedMembersInMixinMixin), RequiresInitialization = true)]
    public partial class HostCanAccessProtectedMembersInMixinSpec
    {
        public HostCanAccessProtectedMembersInMixinMixinWrapper InitializeHostCanAccessProtectedMembersInMixinMixinWrapper()
        {
            return MixinsHelper.HostCanAccessProtectedMembersInMixinMixinWrapperFactory("Target!");
        }

        public string HostMethodCallingProtectedMixinProperty()
        {
            return "Pass: " + prettyName;
        }
    }

/*/////////////////////////////////////////
/// Generated Code
/////////////////////////////////////////*/

//use a dedicated 'pMixin' namespace to keep the AutoGeneratedObjects class out of the clients?
    public class HostCanAccessProtectedMembersInMixinMixinWrapper : HostCanAccessProtectedMembersInMixinMixin
    {
        public HostCanAccessProtectedMembersInMixinMixinWrapper() : base(){}

        public HostCanAccessProtectedMembersInMixinMixinWrapper(string name) : base(name){}

        public new string prettyName
        {
            get { return base.prettyName; }
            set { base.prettyName = value; }
        }
    }

    public interface IHostCanAccessProtectedMembersInMixinMixinRequirements
    {
        HostCanAccessProtectedMembersInMixinMixinWrapper InitializeHostCanAccessProtectedMembersInMixinMixinWrapper();
    }

    public partial class HostCanAccessProtectedMembersInMixinSpec : IHostCanAccessProtectedMembersInMixinMixinRequirements
    {
        /// <summary>
        /// Helper class for creating MixinWrappers.  Contains methods wrapping the Mixin's constructors
        /// </summary>
        protected static class MixinsHelper
        {
            /// <summary>
            /// Calls the <see cref="HostCanAccessProtectedMembersInMixinMixin"/>'s constructor
            /// </summary>
            public static HostCanAccessProtectedMembersInMixinMixinWrapper HostCanAccessProtectedMembersInMixinMixinWrapperFactory(
                string name)
            {
                return new HostCanAccessProtectedMembersInMixinMixinWrapper(name);
            }

            public static HostCanAccessProtectedMembersInMixinMixinWrapper HostCanAccessProtectedMembersInMixinMixinWrapperFactory()
            {
                return new HostCanAccessProtectedMembersInMixinMixinWrapper();
            }
        }

        private sealed class __Mixins //put all auto-generated objects as child types
        {
            public __Mixins(HostCanAccessProtectedMembersInMixinSpec host)
            {
                _ExampleMixin = new Lazy<HostCanAccessProtectedMembersInMixinMixinWrapper>(
                    () => host.InitializeHostCanAccessProtectedMembersInMixinMixinWrapper());
            }

            public readonly Lazy<HostCanAccessProtectedMembersInMixinMixinWrapper> _ExampleMixin;
        }

        private __Mixins ___mixins;

        private __Mixins __mixins
        {
            get
            {
                if (null == ___mixins)
                    ___mixins = new __Mixins(this);

                return ___mixins;
            }
        }

        protected string prettyName
        {
            get { return __mixins._ExampleMixin.Value.prettyName; }
            set { __mixins._ExampleMixin.Value.prettyName = value; }
        }
    }
}
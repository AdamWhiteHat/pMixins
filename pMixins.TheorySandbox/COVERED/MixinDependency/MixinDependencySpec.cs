//----------------------------------------------------------------------- 
// <copyright file="MixinDependencySpec.cs" company="Copacetic Software"> 
// Copyright (c) Copacetic Software.  
// <author>Philip Pittle</author> 
// <date>Sunday, June 08, 2014 9:39:34 PM</date> 
// Licensed under the Apache License, Version 2.0,
// you may not use this file except in compliance with this License.
//  
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an 'AS IS' BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright> 
//-----------------------------------------------------------------------

using System.Collections.Generic;
using CopaceticSoftware.pMixins.CodeGenerator.Tests.IntegrationTests.CompileTests.MixinDependency;
using CopaceticSoftware.pMixins.CodeGenerator.Tests.IntegrationTests.ExpectedErrors;

namespace CopaceticSoftware.pMixins.TheorySandbox.COVERED.MixinDependency
{
    /// <summary>
    /// Covered in:
    ///     <see cref="SimpleMixinDependency"/>
    ///     <see cref="MixinDependencyIsClass"/>
    ///     <see cref="MixinsShareDependency"/>
    ///     <see cref="MixinDependencyIsClassAndIsNotProvided"/>
    /// </summary>
    public interface IDependency
    {
        int GetNumber();
    }

    public interface IEmptyDependency { }
    public interface IEmptyDependency2 { }

    public class Mixin : IMixinDependency<IDependency>,
                        IMixinDependency<IEmptyDependency>,
                        IMixinDependency<IEmptyDependency2>
    {
        public bool OnDependencySetCalled { get; set; }

        public Mixin()
        {
            OnDependencySetCalled = false;
        }

        public int MixinMethod()
        {
            return 42 + Dependency.GetNumber();
        }


        public IDependency Dependency { get; set; }

        IEmptyDependency IMixinDependency<IEmptyDependency>.Dependency { get; set; }

        IEmptyDependency2 IMixinDependency<IEmptyDependency2>.Dependency { get; set; }

        public void OnDependencySet()
        {
            OnDependencySetCalled = true;
        }

        void IMixinDependency<IEmptyDependency>.OnDependencySet() { }
    }

    [BasicMixin(Target = typeof(Mixin))]
    public partial class MixinDependencySpec
    {
        //Could also be provided by a separate Mixin
        public int GetNumber()
        {
            return 0;
        }
    }

/*/////////////////////////////////////////
/// Generated Code
/////////////////////////////////////////*/

    public interface IMixinRequirements { }

    public partial class MixinDependencySpec : IMixinRequirements, IDependency, IEmptyDependency, IEmptyDependency2
    {
        private class __pMixinAutoGenerated
        {
            public class CopaceticSoftware_pMixin_TheorySandbox_Interceptors_BasicInterceptor_Mixin
            {
                //don't need protected wrapper

                //don't need abstract wrapper

                public sealed class MasterWrapper : MasterWrapperBase
                {
                    public readonly Mixin Mixin;

                    public MasterWrapper(IMixinRequirements target)
                    {
                        this.Mixin = new Mixin();

                        base.Initialize(target, Mixin,
                            new List<IMixinInterceptor>());

                        ((IMixinDependency<IDependency>)Mixin).Dependency = (IDependency)target;
                        ((IMixinDependency<IDependency>) Mixin).OnDependencySet();

                        ((IMixinDependency<IEmptyDependency>)Mixin).Dependency = (IEmptyDependency)target;
                        ((IMixinDependency<IEmptyDependency>)Mixin).OnDependencySet();

                        ((IMixinDependency<IEmptyDependency2>)Mixin).Dependency = (IEmptyDependency2)target;
                        ((IMixinDependency<IEmptyDependency2>)Mixin).OnDependencySet();


                    }

                    public int MixinMethod()
                    {
                        return base.ExecuteMethod(
                            "Method",
                            new List<Parameter>(),
                            () => Mixin.MixinMethod());
                    }

                    public bool OnDependencySetCalled
                    {
                        get
                        {
                            return base.ExecutePropertyGet("Property", () => Mixin.OnDependencySetCalled);


                        }
                        set
                        {
                            ExecutePropertySet("Property", value, v => Mixin.OnDependencySetCalled = v);
                        }
                    }

                }
            }
        }

        private sealed partial class __Mixins
        {
            public static readonly global::System.Object ____Lock = new global::System.Object();

            public readonly __pMixinAutoGenerated.CopaceticSoftware_pMixin_TheorySandbox_Interceptors_BasicInterceptor_Mixin.MasterWrapper MixinMasterWrapper;

            public __Mixins(MixinDependencySpec target)
            {
                this.MixinMasterWrapper =
                    new DefaultMixinActivator()
                        .CreateInstance<__pMixinAutoGenerated.CopaceticSoftware_pMixin_TheorySandbox_Interceptors_BasicInterceptor_Mixin.MasterWrapper>(
                            target);
            }
        }

        private __Mixins _____mixins;
        private __Mixins ___mixins
        {
            get
            {
                if (null == _____mixins)
                {
                    lock (__Mixins.____Lock)
                    {
                        if (null == _____mixins)
                        {
                            _____mixins = new __Mixins(this);
                        }
                    }
                }
                return _____mixins;
            }
        }

        public int MixinMethod()
        {
            return ___mixins.MixinMasterWrapper.MixinMethod();
        }

        public bool OnDependencySetCalled
        {
            get { return ___mixins.MixinMasterWrapper.OnDependencySetCalled; }
            set { ___mixins.MixinMasterWrapper.OnDependencySetCalled = value; }
        }
    }
}

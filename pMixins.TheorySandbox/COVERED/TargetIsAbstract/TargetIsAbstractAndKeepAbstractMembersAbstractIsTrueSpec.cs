//----------------------------------------------------------------------- 
// <copyright file="TargetIsAbstractAndKeepAbstractMembersAbstractIsTrueSpec.cs" company="Copacetic Software"> 
// Copyright (c) Copacetic Software.  
// <author>Philip Pittle</author> 
// <date>Friday, August 8, 2014 10:12:36 PM</date> 
// Licensed under the Apache License, Version 2.0,
// you may not use this file except in compliance with this License.
//  
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an 'AS IS' BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright> 
//-----------------------------------------------------------------------

using System.Collections.Generic;
using CopaceticSoftware.pMixins.CodeGenerator.Tests.IntegrationTests.CompileTests.AdvancedMixinTypes;
using CopaceticSoftware.pMixins.TheorySandbox.COVERED.TargetIsAbstract;
using pMixins.AutoGenerated.CopaceticSoftware.pMixins.TheorySandbox.COVERED.TargetIsAbstract;

namespace CopaceticSoftware.pMixins.TheorySandbox.COVERED.TargetIsAbstract
{
    /// <summary>
    /// Covered in:
    ///     <see cref="TargetIsAbstractAndKeepAbstractMembersAbstractIsTrue"/>
    /// </summary>
    public abstract class Mixin
    {
        public abstract int Number { get; }

        public int GetMagicNumber()
        {
            return Number;
        }
    }

    [BasicMixin(Target = typeof(Mixin), KeepAbstractMembersAbstract = true)]
    public abstract partial class TargetIsAbstractAndKeepAbstractMembersAbstractIsTrueSpec
    {
    }
}

/*/////////////////////////////////////////
/// Generated Code
/////////////////////////////////////////*/
namespace CopaceticSoftware.pMixins.TheorySandbox.COVERED.TargetIsAbstract
{
    public interface IMixinRequirements
    {
        int Number { get; }
    }

    public abstract partial class TargetIsAbstractAndKeepAbstractMembersAbstractIsTrueSpec : IMixinRequirements
    {
        private class __pMixinAutoGenerated
        {
            public class CopaceticSoftware_pMixin_TheorySandbox_TargetIsAbstract_Mixin
            {
                //don't need protected wrapper

                //don't need abstract wrapper

                public sealed class MasterWrapper : MasterWrapperBase
                {
                    public readonly Mixin Mixin;

                    public MasterWrapper(IMixinRequirements target)
                    {
                        this.Mixin =
                             new DefaultMixinActivator()
                                .CreateInstance < AbstractWrapper >(target);

                        base.Initialize(target, Mixin,
                            new List<IMixinInterceptor>());
                    }

                    public int GetMagicNumber()
                    {
                        return base.ExecuteMethod(
                            "Method",
                            new List<Parameter>(),
                            () => Mixin.GetMagicNumber());
                    }
                }
            }
        }

        private sealed partial class __Mixins
        {
            public static readonly global::System.Object ____Lock = new global::System.Object();

            public readonly __pMixinAutoGenerated.CopaceticSoftware_pMixin_TheorySandbox_TargetIsAbstract_Mixin.MasterWrapper MasterWrapper;

            public __Mixins(TargetIsAbstractAndKeepAbstractMembersAbstractIsTrueSpec target)
            {
                this.MasterWrapper =
                    new DefaultMixinActivator()
                        .CreateInstance<__pMixinAutoGenerated.CopaceticSoftware_pMixin_TheorySandbox_TargetIsAbstract_Mixin.MasterWrapper>(
                            target);
            }
        }

        private __Mixins _____mixins;
        private __Mixins ___mixins
        {
            get
            {
                if (null == _____mixins)
                {
                    lock (__Mixins.____Lock)
                    {
                        if (null == _____mixins)
                        {
                            _____mixins = new __Mixins(this);
                        }
                    }
                }
                return _____mixins;
            }
        }

        public int GetMagicNumber()
        {
            return ___mixins.MasterWrapper.GetMagicNumber();
        }

        //IMPLEMENT THE ABSTRACT MEMBERS AS ABSTRACT
        public abstract int Number { get; }
    }
}

namespace pMixins.AutoGenerated.CopaceticSoftware.pMixins.TheorySandbox.COVERED.TargetIsAbstract
{
    public abstract class ProtectedMembersWrapper : global::CopaceticSoftware.pMixins.TheorySandbox.COVERED.TargetIsAbstract.Mixin{}

    public class AbstractWrapper : ProtectedMembersWrapper
    {
        private readonly IMixinRequirements _target;

        public AbstractWrapper(IMixinRequirements target)
        {
            _target = target;
        }

        public override int Number{get { return _target.Number; }}
    }
}

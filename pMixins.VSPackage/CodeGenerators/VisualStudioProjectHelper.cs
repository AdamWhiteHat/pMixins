//----------------------------------------------------------------------- 
// <copyright file="VisualStudioProjectHelper.cs" company="Copacetic Software"> 
// Copyright (c) Copacetic Software.  
// <author>Philip Pittle</author> 
// <date>Sunday, May 4, 2014 4:31:07 PM</date> 
// Licensed under the Apache License, Version 2.0,
// you may not use this file except in compliance with this License.
//  
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an 'AS IS' BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright> 
//-----------------------------------------------------------------------

using System;
using System.Linq;
using System.Reflection;
using EnvDTE;
using EnvDTE80;
using log4net;
using VSLangProj;

namespace CopaceticSoftware.pMixins_VSPackage.CodeGenerators
{
    public interface IVisualStudioProjectHelper
    {
        void RegisterCodeGeneratedFile(string projectFullPath, string sourceFile, string autoGeneratedFile);

        void SaveFile(string projectFullPath, string sourceFile);
    }

    
    public class VisualStudioProjectHelper : IVisualStudioProjectHelper
    {
        private static readonly ILog _log = LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);

        private readonly DTE2 _dte;
        public VisualStudioProjectHelper(DTE2 dte)
        {
            _dte = dte;
        }

        public void RegisterCodeGeneratedFile(string projectFullPath, string sourceFile, string autoGeneratedFile)
        {
           throw new NotImplementedException();
        }

        public void SaveFile(string projectFullPath, string sourceFile)
        {
            var project =
                 _dte.Solution.Projects.OfType<Project>()
                     .FirstOrDefault(
                         p => p.FullName.Equals(projectFullPath, StringComparison.InvariantCultureIgnoreCase));

            if (null == project)
            {
                _log.ErrorFormat("Could not find Project with Path [{0}]", projectFullPath);
                return;
            }

            for (int i = 1; i <= project.ProjectItems.Count; i++)
            {
                var pi = project.ProjectItems.Item(i);

                for (short j = 1; j <= pi.FileCount; j++)
                {
                    if (pi.get_FileNames(j).Equals(sourceFile, StringComparison.InvariantCultureIgnoreCase))
                    {
                        _log.InfoFormat("Found Project Item [{0}]", sourceFile);

                        pi.Save();

                        return;
                    }
                }
            }

            _log.ErrorFormat("Failed to find Project Item [{0}]", sourceFile);
        }
    }
}
